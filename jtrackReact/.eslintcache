[{"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\index.js":"1","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\serviceWorker.js":"2","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\App.js":"3","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Login.js":"4","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Nav.js":"5","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Job.js":"6","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\AuthenticatedRoute.js":"7","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobEdit.js":"8","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobResolution.js":"9","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobPriorityCreate.js":"10","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobPriority.js":"11","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobCreate.js":"12","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\AuthService.js":"13","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobPriorityEdit.js":"14","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobResolutionEdit.js":"15","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStatus.js":"16","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobResolutionCreate.js":"17","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStatusEdit.js":"18","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStageCreate.js":"19","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStage.js":"20","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStageEdit.js":"21","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStatusCreate.js":"22","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobType.js":"23","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobTypeCreate.js":"24","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobTypeEdit.js":"25","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCreate.js":"26","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Timesheet.js":"27","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCodeEdit.js":"28","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetEdit.js":"29","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCode.js":"30","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\User.js":"31","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\UserCreate.js":"32","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCodeCreate.js":"33","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\UserEdit.js":"34","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Message.js":"35","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\GenService.js":"36","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobTypeService.js":"37","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobService.js":"38","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\UserService.js":"39","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobStatusService.js":"40","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobStageService.js":"41","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\TimesheetCodeService.js":"42","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobPriorityService.js":"43","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobResolutionService.js":"44","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\TimesheetService.js":"45"},{"size":489,"mtime":1602811117899,"results":"46","hashOfConfig":"47"},{"size":5003,"mtime":499162500000,"results":"48","hashOfConfig":"47"},{"size":5371,"mtime":1590971211231,"results":"49","hashOfConfig":"47"},{"size":3711,"mtime":1582064577053,"results":"50","hashOfConfig":"47"},{"size":2117,"mtime":1590989558898,"results":"51","hashOfConfig":"47"},{"size":17281,"mtime":1581152306413,"results":"52","hashOfConfig":"47"},{"size":745,"mtime":1582006803175,"results":"53","hashOfConfig":"47"},{"size":23065,"mtime":1581369634656,"results":"54","hashOfConfig":"47"},{"size":4097,"mtime":1581144008010,"results":"55","hashOfConfig":"47"},{"size":5589,"mtime":1581143962888,"results":"56","hashOfConfig":"47"},{"size":4007,"mtime":1581143953155,"results":"57","hashOfConfig":"47"},{"size":21899,"mtime":1581143868480,"results":"58","hashOfConfig":"47"},{"size":3367,"mtime":1608067707140,"results":"59","hashOfConfig":"47"},{"size":5864,"mtime":1581372682103,"results":"60","hashOfConfig":"47"},{"size":5946,"mtime":1581372706875,"results":"61","hashOfConfig":"47"},{"size":3917,"mtime":1581144055334,"results":"62","hashOfConfig":"47"},{"size":5663,"mtime":1581144021609,"results":"63","hashOfConfig":"47"},{"size":5785,"mtime":1581372757449,"results":"64","hashOfConfig":"47"},{"size":5481,"mtime":1581144041615,"results":"65","hashOfConfig":"47"},{"size":3872,"mtime":1581144035603,"results":"66","hashOfConfig":"47"},{"size":5744,"mtime":1581372729641,"results":"67","hashOfConfig":"47"},{"size":5518,"mtime":1581144061680,"results":"68","hashOfConfig":"47"},{"size":3826,"mtime":1581144077327,"results":"69","hashOfConfig":"47"},{"size":5444,"mtime":1581144083532,"results":"70","hashOfConfig":"47"},{"size":5703,"mtime":1581372787198,"results":"71","hashOfConfig":"47"},{"size":10718,"mtime":1581144140032,"results":"72","hashOfConfig":"47"},{"size":9301,"mtime":1582061895449,"results":"73","hashOfConfig":"47"},{"size":5934,"mtime":1581372817334,"results":"74","hashOfConfig":"47"},{"size":11375,"mtime":1607320208063,"results":"75","hashOfConfig":"47"},{"size":4097,"mtime":1581144117715,"results":"76","hashOfConfig":"47"},{"size":4508,"mtime":1582008731160,"results":"77","hashOfConfig":"47"},{"size":7014,"mtime":1582004982338,"results":"78","hashOfConfig":"47"},{"size":5788,"mtime":1581144124724,"results":"79","hashOfConfig":"47"},{"size":7142,"mtime":1582005030904,"results":"80","hashOfConfig":"47"},{"size":2122,"mtime":1607317648335,"results":"81","hashOfConfig":"47"},{"size":1292,"mtime":1582063917874,"results":"82","hashOfConfig":"47"},{"size":935,"mtime":1597011015519,"results":"83","hashOfConfig":"47"},{"size":1373,"mtime":1597010777255,"results":"84","hashOfConfig":"47"},{"size":873,"mtime":1597011387422,"results":"85","hashOfConfig":"47"},{"size":988,"mtime":1597010937686,"results":"86","hashOfConfig":"47"},{"size":959,"mtime":1597010861492,"results":"87","hashOfConfig":"47"},{"size":1079,"mtime":1597011131195,"results":"88","hashOfConfig":"47"},{"size":1036,"mtime":1597009976986,"results":"89","hashOfConfig":"47"},{"size":1079,"mtime":1597010100813,"results":"90","hashOfConfig":"47"},{"size":1261,"mtime":1597011301583,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"d5f3u1",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"94"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\index.js",[],["193","194"],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\serviceWorker.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\App.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Login.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Nav.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Job.js",["195"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport JobService from '../service/JobService';\r\nimport JobTypeService from '../service/JobTypeService';\r\nimport JobStatusService from '../service/JobStatusService';\r\nimport UserService from '../service/UserService';\r\nimport Message from './Message';\r\n\r\nclass Job extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            jobList: [],\r\n            jobTypeList: [],\r\n            jobStatusList: [],\r\n            assignedToList: [],\r\n            jobSO: {\r\n                jobName: '',\r\n                jobType: '',\r\n                jobStatus: '',\r\n                assignedTo: '',\r\n                includeChildJobs: true,\r\n                jobNameChild: '',\r\n                jobTypeChild: '',\r\n                jobStatusChild: '',\r\n                assignedToChild: '',\r\n            },\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeCheckBox = this.handleChangeCheckBox.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getJobList();\r\n        this.getJobList2(this.state.jobSO);\r\n        this.getJobTypeList();\r\n        this.getJobStatusList();\r\n        this.getAssignedToList();\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.getJobList2(this.state.jobSO);\r\n    }\r\n\r\n    handleChange(event) {\r\n\r\n        let jobSO = {\r\n            ...this.state.jobSO,\r\n            [event.target.name] : event.target.value\r\n        };\r\n\r\n        this.setState({jobSO:jobSO});\r\n    }\r\n\r\n    handleChangeCheckBox(event) {\r\n        \r\n        let jobSO = {\r\n            ...this.state.jobSO,\r\n            includeChildJobs : !this.state.jobSO.includeChildJobs\r\n        };\r\n\r\n        this.setState({jobSO:jobSO});\r\n    }\r\n\r\n    getJobList(){\r\n        JobService.getJobList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    getJobList2(jobSO){\r\n        JobService.getJobList2(jobSO)\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteJob(jobNo){\r\n        JobService.deleteJob(jobNo)\r\n        .then(res => {\r\n            this.getJobList2(this.state.jobSO);\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    getAssignedToList(){\r\n        UserService.getUserList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ assignedToList: res.data })\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    getJobTypeList(){\r\n        JobTypeService.getJobTypeList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobTypeList: res.data })\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    getJobStatusList(){\r\n        JobStatusService.getJobStatusList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobStatusList: res.data })\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDate(dtTime){\r\n        return GenService.formatDate(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"form-region\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <table cellPadding=\"0\" border=\"1\" cellSpacing=\"0\" summary=\"\" className=\"form-standard\">\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <table border=\"0\" summary=\"\" >\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Job Name</label>\r\n                                                </td>\r\n                                                <td  colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <input name=\"jobName\" value = {this.state.jobSO.jobName} onChange={this.handleChange} />\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Job Type</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"jobType\" value = {this.state.jobSO.jobType} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.jobTypeList.map((jobType) => (\r\n                                                            <option key={jobType.jobType} value={jobType.jobType}>{jobType.jobType}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Include Child Jobs</label>\r\n                                                </td>\r\n                                                <td  colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <input type=\"checkbox\" name=\"includeChildJobs\" checked={this.state.jobSO.includeChildJobs} onChange={this.handleChangeCheckBox} />\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>==></label>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Job Status</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"jobStatus\" value = {this.state.jobSO.jobStatus} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.jobStatusList.map((jobStatus) => (\r\n                                                            <option key={jobStatus.jobStatus} value={jobStatus.jobStatus}>{jobStatus.jobStatus}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>assignedTo</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"assignedTo\" value = {this.state.jobSO.assignedTo} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.assignedToList.map((assignedTo) => (\r\n                                                            <option key={assignedTo.userId} value={assignedTo.userId}>{assignedTo.firstName} {assignedTo.lastName}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input type=\"submit\" value=\"Go\" className=\"button\" />\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table> \r\n                                </td>\r\n                                <td>\r\n                                    <table border=\"0\" summary=\"\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Job Name</label>\r\n                                                </td>\r\n                                                <td  colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <input name=\"jobNameChild\" value = {this.state.jobSO.jobNameChild} disabled={!this.state.jobSO.includeChildJobs} onChange={this.handleChange} />\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Job Type</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"jobTypeChild\" value = {this.state.jobSO.jobTypeChild} disabled={!this.state.jobSO.includeChildJobs} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.jobTypeList.map((jobType) => (\r\n                                                            <option key={jobType.jobType} value={jobType.jobType}>{jobType.jobType}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Job Status</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"jobStatusChild\" value = {this.state.jobSO.jobStatusChild} disabled={!this.state.jobSO.includeChildJobs} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.jobStatusList.map((jobStatus) => (\r\n                                                            <option key={jobStatus.jobStatus} value={jobStatus.jobStatus}>{jobStatus.jobStatus}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>assignedTo</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"assignedToChild\" value = {this.state.jobSO.assignedToChild} disabled={!this.state.jobSO.includeChildJobs} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.assignedToList.map((assignedTo) => (\r\n                                                            <option key={assignedTo.userId} value={assignedTo.userId}>{assignedTo.firstName} {assignedTo.lastName}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table> \r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </form>\r\n                </div>\r\n                <div className=\"button-region\">\r\n                    <Link to='/JobCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Job No</th>\r\n                                <th>Parent Job Name</th>\r\n                                <th>Job Name</th>\r\n                                <th>Job Type</th>\r\n                                <th>Job Stage</th>\r\n                                <th>Job Priority</th>\r\n                                <th>Job Status</th>\r\n                                <th>Job Resolution</th>\r\n                                <th>Job Order</th>\r\n                                <th>Assigned To</th>\r\n                                <th>Timesheet Code</th>\r\n                                <th>Estimated Start Date</th>\r\n                                <th>Actual Start Date</th>\r\n                                <th>Estimated End Date</th>\r\n                                <th>Actual End Date</th>\r\n                                <th>Estimated Hrs</th>\r\n                                <th>Completed Hrs</th>\r\n                                <th>Active</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.jobList.map((job) => (\r\n                                <tr key={job.jobNo} className=\"highlight-row\">\r\n                                    <td><Link to={`/JobEdit/${job.jobNo}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteJob.bind(this, job.jobNo)}>Delete</a></td>\r\n                                    <td>{job.jobNo}</td>\r\n                                    <td>{job.parentJobObj != null && job.parentJobObj.jobName}</td>\r\n                                    <td>{job.jobName}</td>\r\n                                    <td>{job.jobType}</td>\r\n                                    <td>{job.jobStage}</td>\r\n                                    <td>{job.jobPriority}</td>\r\n                                    <td>{job.jobStatus}</td>\r\n                                    <td>{job.jobResolution}</td>\r\n                                    <td>{job.jobOrder}</td>\r\n                                    <td>{job.assignedToObj != null && job.assignedToObj.firstName} {job.assignedToObj != null && job.assignedToObj.lastName}</td>\r\n                                    <td>{job.timesheetCode}</td>\r\n                                    <td>{this.formatDate(job.estimatedStartDate)}</td>\r\n                                    <td>{this.formatDate(job.actualStartDate)}</td>\r\n                                    <td>{this.formatDate(job.estimatedEndDate)}</td>\r\n                                    <td>{this.formatDate(job.estimatedEndDate)}</td>\r\n                                    <td>{job.estimatedHrs}</td>\r\n                                    <td>{job.completedHrs}</td>\r\n                                    {job.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!job.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Job;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\AuthenticatedRoute.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobResolution.js",["196"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport JobResolutionService from '../service/JobResolutionService';\r\nimport Message from './Message';\r\n\r\nclass JobResolution extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            jobResolutionList: [],\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getJobResolutionList();\r\n    }\r\n\r\n    getJobResolutionList(){\r\n        JobResolutionService.getJobResolutionList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobResolutionList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteJobResolution(jobResolution){\r\n        JobResolutionService.deleteJobResolution(jobResolution)\r\n        .then(res => {\r\n            this.getJobResolutionList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    <Link to='/JobResolutionCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Job Resolution</th>\r\n                                <th>Job Resolution Description</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.jobResolutionList.map((jobResolution) => (\r\n                                <tr key={jobResolution.jobResolution} className=\"highlight-row\">\r\n                                    <td><Link to={`/JobResolutionEdit/${jobResolution.jobResolution}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteJobResolution.bind(this, jobResolution.jobResolution)}>Delete</a></td>\r\n                                    <td>{jobResolution.jobResolution}</td>\r\n                                    <td>{jobResolution.jobResolutionDesc}</td>\r\n                                    {jobResolution.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!jobResolution.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(jobResolution.dateCrt)}</td>\r\n                                    <td>{jobResolution.userCrtObj != null && jobResolution.userCrtObj.firstName} {jobResolution.userCrtObj != null && jobResolution.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(jobResolution.dateMod)}</td>\r\n                                    <td>{jobResolution.userModObj != null && jobResolution.userModObj.firstName} {jobResolution.userModObj != null && jobResolution.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobResolution;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobPriorityCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobPriority.js",["197"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport JobPriorityService from '../service/JobPriorityService';\r\nimport Message from './Message';\r\n\r\nclass JobPriority extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            jobPriorityList: [],\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getJobPriorityList();\r\n    }\r\n\r\n    getJobPriorityList(){\r\n        JobPriorityService.getJobPriorityList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobPriorityList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteJobPriority(jobPriority){\r\n        JobPriorityService.deleteJobPriority(jobPriority)\r\n        .then(res => {\r\n            this.getJobPriorityList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    <Link to='/JobPriorityCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Job Priority</th>\r\n                                <th>Job Priority Description</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.jobPriorityList.map((jobPriority) => (\r\n                                <tr key={jobPriority.jobPriority} className=\"highlight-row\">\r\n                                    <td><Link to={`/JobPriorityEdit/${jobPriority.jobPriority}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteJobPriority.bind(this, jobPriority.jobPriority)}>Delete</a></td>\r\n                                    <td>{jobPriority.jobPriority}</td>\r\n                                    <td>{jobPriority.jobPriorityDesc}</td>\r\n                                    {jobPriority.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!jobPriority.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(jobPriority.dateCrt)}</td>\r\n                                    <td>{jobPriority.userCrtObj != null && jobPriority.userCrtObj.firstName} {jobPriority.userCrtObj != null && jobPriority.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(jobPriority.dateMod)}</td>\r\n                                    <td>{jobPriority.userModObj != null && jobPriority.userModObj.firstName} {jobPriority.userModObj != null && jobPriority.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobPriority;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\AuthService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobPriorityEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobResolutionEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStatus.js",["198"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport JobStatusService from '../service/JobStatusService';\r\nimport Message from './Message';\r\n\r\nclass JobStatus extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            jobStatusList: [],\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getJobStatusList();\r\n    }\r\n\r\n    getJobStatusList(){\r\n        JobStatusService.getJobStatusList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobStatusList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteJobStatus(jobStatus){\r\n        JobStatusService.deleteJobStatus(jobStatus)\r\n        .then(res => {\r\n            this.getJobStatusList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    <Link to='/JobStatusCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Job Status</th>\r\n                                <th>Job Status Description</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.jobStatusList.map((jobStatus) => (\r\n                                <tr key={jobStatus.jobStatus} className=\"highlight-row\">\r\n                                    <td><Link to={`/JobStatusEdit/${jobStatus.jobStatus}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteJobStatus.bind(this, jobStatus.jobStatus)}>Delete</a></td>\r\n                                    <td>{jobStatus.jobStatus}</td>\r\n                                    <td>{jobStatus.jobStatusDesc}</td>\r\n                                    {jobStatus.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!jobStatus.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(jobStatus.dateCrt)}</td>\r\n                                    <td>{jobStatus.userCrtObj != null && jobStatus.userCrtObj.firstName} {jobStatus.userCrtObj != null && jobStatus.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(jobStatus.dateMod)}</td>\r\n                                    <td>{jobStatus.userModObj != null && jobStatus.userModObj.firstName} {jobStatus.userModObj != null && jobStatus.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobStatus;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobResolutionCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStatusEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStageCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStage.js",["199"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport JobStageService from '../service/JobStageService';\r\nimport Message from './Message';\r\n\r\nclass JobStage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            jobStageList: [],\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getJobStageList();\r\n    }\r\n\r\n    getJobStageList(){\r\n        JobStageService.getJobStageList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobStageList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteJobStage(jobStage){\r\n        JobStageService.deleteJobStage(jobStage)\r\n        .then(res => {\r\n            this.getJobStageList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    <Link to='/JobStageCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Job Stage</th>\r\n                                <th>Job Stage Description</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.jobStageList.map((jobStage) => (\r\n                                <tr key={jobStage.jobStage} className=\"highlight-row\">\r\n                                    <td><Link to={`/JobStageEdit/${jobStage.jobStage}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteJobStage.bind(this, jobStage.jobStage)}>Delete</a></td>\r\n                                    <td>{jobStage.jobStage}</td>\r\n                                    <td>{jobStage.jobStageDesc}</td>\r\n                                    {jobStage.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!jobStage.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(jobStage.dateCrt)}</td>\r\n                                    <td>{jobStage.userCrtObj != null && jobStage.userCrtObj.firstName} {jobStage.userCrtObj != null && jobStage.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(jobStage.dateMod)}</td>\r\n                                    <td>{jobStage.userModObj != null && jobStage.userModObj.firstName} {jobStage.userModObj != null && jobStage.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobStage;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStageEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobStatusCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobType.js",["200"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport JobTypeService from '../service/JobTypeService';\r\nimport Message from './Message';\r\n\r\nclass JobType extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            jobTypeList: [],\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getJobTypeList();\r\n    }\r\n\r\n    getJobTypeList(){\r\n        JobTypeService.getJobTypeList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ jobTypeList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteJobType(jobType){\r\n        JobTypeService.deleteJobType(jobType)\r\n        .then(res => {\r\n            this.getJobTypeList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n               <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    <Link to='/JobTypeCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Job Type</th>\r\n                                <th>Job Type Description</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.jobTypeList.map((jobType) => (\r\n                                <tr key={jobType.jobType} className=\"highlight-row\">\r\n                                    <td><Link to={`/JobTypeEdit/${jobType.jobType}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteJobType.bind(this, jobType.jobType)}>Delete</a></td>\r\n                                    <td>{jobType.jobType}</td>\r\n                                    <td>{jobType.jobTypeDesc}</td>\r\n                                    {jobType.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!jobType.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(jobType.dateCrt)}</td>\r\n                                    <td>{jobType.userCrtObj != null && jobType.userCrtObj.firstName} {jobType.userCrtObj != null && jobType.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(jobType.dateMod)}</td>\r\n                                    <td>{jobType.userModObj != null && jobType.userModObj.firstName} {jobType.userModObj != null && jobType.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JobType;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobTypeCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\JobTypeEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Timesheet.js",["201"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport TimesheetService from '../service/TimesheetService';\r\nimport UserService from '../service/UserService';\r\nimport Message from './Message';\r\n\r\nclass Timesheet extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timesheetList: [],\r\n            userList: [],\r\n            timesheetSO: {\r\n                userId: '',\r\n                workedDateFrom: '',\r\n                workedDateTo: ''\r\n            },\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTimesheetList();\r\n        this.getUserList();\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.getTimesheetList2(this.state.timesheetSO);\r\n    }\r\n\r\n    handleChange(event) {\r\n\r\n        let timesheetSO = {\r\n            ...this.state.timesheetSO,\r\n            [event.target.name] : event.target.value\r\n        };\r\n\r\n        this.setState({timesheetSO:timesheetSO});\r\n    }\r\n\r\n    getTimesheetList(){\r\n        TimesheetService.getTimesheetList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ timesheetList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    getTimesheetList2(timesheetSO){\r\n        TimesheetService.getTimesheetList2(timesheetSO)\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ timesheetList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteTimesheet(timesheetId){\r\n        TimesheetService.deleteTimesheet(timesheetId)\r\n        .then(res => {\r\n            this.getTimesheetList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    getUserList(){\r\n        UserService.getUserList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ userList: res.data })\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    formatDate(dtTime){\r\n        return GenService.formatDate(dtTime);\r\n    }\r\n\r\n    formatDay(dtTime){\r\n        return GenService.formatDay(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"form-region\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"form-standard\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <table border=\"0\" summary=\"\" >\r\n                                            <tbody>\r\n                                            <tr>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>User</label>\r\n                                                </td>\r\n                                                <td colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <select name=\"userId\" value = {this.state.timesheetSO.userId} onChange={this.handleChange}>\r\n                                                        <option value=\"\"></option>\r\n                                                        {this.state.userList.map((user) => (\r\n                                                            <option key={user.userId} value={user.userId}>{user.firstName} {user.lastName}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>Worked Date From</label>\r\n                                                </td>\r\n                                                <td  colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <input type=\"date\" name=\"workedDateFrom\" value = {this.state.timesheetSO.workedDateFrom} onChange={this.handleChange} />\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\" align=\"right\">\r\n                                                    <label>To</label>\r\n                                                </td>\r\n                                                <td  colSpan=\"1\" rowSpan=\"1\" align=\"left\" valign=\"middle\">\r\n                                                    <input type=\"date\" name=\"workedDateTo\" value = {this.state.timesheetSO.workedDateTo} onChange={this.handleChange} />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input type=\"submit\" value=\"Go\" className=\"button\" />\r\n                                                </td>\r\n                                            </tr>\r\n                                            </tbody>\r\n                                        </table> \r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </form>\r\n                </div>\r\n                <div className=\"button-region\">\r\n                    <Link to='/TimesheetCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>User</th>\r\n                                <th>Job No</th>\r\n                                <th>Job Name</th>\r\n                                <th>Worked Date</th>\r\n                                <th>Worked Day</th>\r\n                                <th>Worked Hrs</th>\r\n                                <th>Timesheet Code</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.timesheetList.map((timesheet) => (\r\n                                <tr key={timesheet.timesheetId} className=\"highlight-row\">\r\n                                    <td><Link to={`/TimesheetEdit/${timesheet.timesheetId}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteTimesheet.bind(this, timesheet.timesheetId)}>Delete</a></td>\r\n                                    <td>{timesheet.userObj != null && timesheet.userObj.firstName} {timesheet.userObj != null && timesheet.userObj.lastName}</td>\r\n                                    <td>{timesheet.jobNo}</td>\r\n                                    <td>{timesheet.jobObj != null && timesheet.jobObj.jobName}</td>\r\n                                    <td>{this.formatDate(timesheet.workedDate)}</td>\r\n                                    <td>{this.formatDay(timesheet.workedDate)}</td>\r\n                                    <td>{timesheet.workedHrs}</td>\r\n                                    <td>{timesheet.timesheetCode}</td>\r\n                                    {timesheet.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!timesheet.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(timesheet.dateCrt)}</td>\r\n                                    <td>{timesheet.userCrtObj != null && timesheet.userCrtObj.firstName} {timesheet.userCrtObj != null && timesheet.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(timesheet.dateMod)}</td>\r\n                                    <td>{timesheet.userModObj != null && timesheet.userModObj.firstName} {timesheet.userModObj != null && timesheet.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timesheet;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCodeEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCode.js",["202"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport TimesheetCodeService from '../service/TimesheetCodeService';\r\nimport Message from './Message';\r\n\r\nclass TimesheetCode extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timesheetCodeList: [],\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTimesheetCodeList();\r\n    }\r\n\r\n    getTimesheetCodeList(){\r\n        TimesheetCodeService.getTimesheetCodeList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ timesheetCodeList: res.data });\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });;\r\n    }\r\n\r\n    deleteTimesheetCode(timesheetCode){\r\n        TimesheetCodeService.deleteTimesheetCode(timesheetCode)\r\n        .then(res => {\r\n            this.getTimesheetCodeList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    <Link to='/TimesheetCodeCreate' className=\"button\">Create</Link>\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>Timesheet Code</th>\r\n                                <th>Timesheet Code Description</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.timesheetCodeList.map((timesheetCode) => (\r\n                                <tr key={timesheetCode.timesheetCode} className=\"highlight-row\">\r\n                                    <td><Link to={`/TimesheetCodeEdit/${timesheetCode.timesheetCode}`}>Edit</Link></td>\r\n                                    <td><a href=\"#\" onClick = {this.deleteTimesheetCode.bind(this, timesheetCode.timesheetCode)}>Delete</a></td>\r\n                                    <td>{timesheetCode.timesheetCode}</td>\r\n                                    <td>{timesheetCode.timesheetCodeDesc}</td>\r\n                                    {timesheetCode.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!timesheetCode.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(timesheetCode.dateCrt)}</td>\r\n                                    <td>{timesheetCode.userCrtObj != null && timesheetCode.userCrtObj.firstName} {timesheetCode.userCrtObj != null && timesheetCode.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(timesheetCode.dateMod)}</td>\r\n                                    <td>{timesheetCode.userModObj != null && timesheetCode.userModObj.firstName} {timesheetCode.userModObj != null && timesheetCode.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TimesheetCode;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\User.js",["203","204","205"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GenService from '../service/GenService';\r\nimport UserService from '../service/UserService';\r\nimport AuthService from '../service/AuthService';\r\nimport Message from './Message';\r\n\r\nclass User extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            userList: [],\r\n            isUserAdmin: false,\r\n            msgObj: {\r\n              msg: '',\r\n              isError: true\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ isUserAdmin: AuthService.isUserAdmin() })\r\n        this.getUserList();\r\n    }\r\n\r\n    getUserList(){\r\n        UserService.getUserList()\r\n        .then(res => {\r\n            this.updateMessage('');\r\n            this.setState({ userList: res.data })\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    deleteUser(userId){\r\n        UserService.deleteUser(userId)\r\n        .then(res => {\r\n            this.getUserList();\r\n        })\r\n        .catch(err => {\r\n            this.updateMessage(err, true);\r\n        });\r\n    }\r\n\r\n    updateMessage(msg, isError = false){\r\n        this.setState({msgObj: {msg:msg, isError:isError}});\r\n    }\r\n\r\n    formatDateTime(dtTime){\r\n        return GenService.formatDateTime(dtTime);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Message msgObj={this.state.msgObj} />\r\n                <div className=\"button-region\">\r\n                    {this.state.isUserAdmin && <Link to='/UserCreate' className=\"button\">Create</Link>}\r\n                    {!this.state.isUserAdmin && <Link to='/UserCreate' className=\"button\" className=\"button-disabled\">Create</Link>}\r\n                </div>\r\n                <div className=\"report-region-2\">\r\n                    <table cellPadding=\"0\" border=\"0\" cellSpacing=\"0\" summary=\"\" className=\"report-standard\">\r\n                        <thead>\r\n                            <tr >\r\n                                <th></th>\r\n                                <th></th>\r\n                                <th>User ID</th>\r\n                                <th>First Name</th>\r\n                                <th>Last Name</th>\r\n                                <th>Active</th>\r\n                                <th>Date Created</th>\r\n                                <th>User Created</th>\r\n                                <th>Date Modified</th>\r\n                                <th>User Modified</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.userList.map((user) => (\r\n                                <tr key={user.userId} className=\"highlight-row\">\r\n                                    {this.state.isUserAdmin && <td><Link to={`/UserEdit/${user.userId}`}>Edit</Link></td>}\r\n                                    {!this.state.isUserAdmin && <td><Link to={`/UserEdit/${user.userId}`} className=\"link-disabled\">Edit</Link></td>}\r\n                                    {this.state.isUserAdmin && <td><a href=\"#\" onClick = {this.deleteUser.bind(this, user.userId)}>Delete</a></td>}\r\n                                    {!this.state.isUserAdmin && <td><a href=\"#\" onClick = {this.deleteUser.bind(this, user.userId)} className=\"link-disabled\">Delete</a></td>}\r\n                                    <td>{user.userId}</td>\r\n                                    <td>{user.firstName}</td>\r\n                                    <td>{user.lastName}</td>\r\n                                    {user.active && <td align=\"center\"><input type=\"checkbox\" checked disabled /></td>}\r\n                                    {!user.active && <td align=\"center\"><input type=\"checkbox\" disabled /></td>}\r\n                                    <td>{this.formatDateTime(user.dateCrt)}</td>\r\n                                    <td>{user.userCrtObj != null && user.userCrtObj.firstName} {user.userCrtObj != null && user.userCrtObj.lastName}</td>\r\n                                    <td>{this.formatDateTime(user.dateMod)}</td>\r\n                                    <td>{user.userModObj != null && user.userModObj.firstName} {user.userModObj != null && user.userModObj.lastName}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\UserCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\TimesheetCodeCreate.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\UserEdit.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\component\\Message.js",["206"],"import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport AuthService from '../service/AuthService';\r\n\r\nclass Message extends Component {\r\n\r\n    logout(){\r\n        AuthService.logout();\r\n        this.props.history.push(\"/Login\");\r\n    }\r\n\r\n    renderMsg(){\r\n        let msg = this.props.msgObj.msg;\r\n       \r\n        if(msg === null || msg === ''){\r\n            return '';\r\n        }\r\n\r\n        if(typeof(msg) === 'object'){\r\n            if(msg.response !== undefined){\r\n                msg = msg.response.data;\r\n                if(typeof(msg) === 'object'){\r\n                    if(msg.error !== undefined){\r\n                        // msg = msg.error;\r\n                        // if(msg === 'invalid_token'){\r\n                        //     msg = 'Session expired';\r\n                        //     this.logout();  \r\n                        // }else if(msg === 'invalid_grant'){\r\n                        //     msg = 'Bad credentials';    \r\n                        // }\r\n\r\n                        if(msg.error === 'invalid_token'){\r\n                            msg = 'Session expired';\r\n                            this.logout();  \r\n                        }else if(msg.error === 'invalid_grant'){\r\n                            msg = 'Bad credentials';    \r\n                        }else if(msg.error == 'invalid_data'){\r\n                            msg = msg.message\r\n                        }else{\r\n                            msg = msg.error;\r\n                        }\r\n                    }\r\n                }\r\n            }else {\r\n                msg = msg.message;\r\n            }\r\n        }\r\n\r\n        if(msg === null || msg === ''){\r\n            return '';\r\n        }\r\n\r\n        if(this.props.msgObj.isError){\r\n            return(<div className=\"alert alert-danger\">{msg}</div>);\r\n        }else{\r\n            return(<div className=\"alert alert-info\">{msg}</div>);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                {this.renderMsg()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Message);","C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\GenService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobTypeService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\UserService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobStatusService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobStageService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\TimesheetCodeService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobPriorityService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\JobResolutionService.js",[],"C:\\WorkingDir\\Projects\\ProjectJTrackSample\\jtrackReact\\src\\service\\TimesheetService.js",[],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":303,"column":41,"nodeType":"213","endLine":303,"endColumn":102},{"ruleId":"211","severity":1,"message":"212","line":79,"column":41,"nodeType":"213","endLine":79,"endColumn":130},{"ruleId":"211","severity":1,"message":"212","line":79,"column":41,"nodeType":"213","endLine":79,"endColumn":124},{"ruleId":"211","severity":1,"message":"212","line":79,"column":41,"nodeType":"213","endLine":79,"endColumn":118},{"ruleId":"211","severity":1,"message":"212","line":79,"column":41,"nodeType":"213","endLine":79,"endColumn":115},{"ruleId":"211","severity":1,"message":"212","line":79,"column":41,"nodeType":"213","endLine":79,"endColumn":112},{"ruleId":"211","severity":1,"message":"212","line":183,"column":41,"nodeType":"213","endLine":183,"endColumn":120},{"ruleId":"211","severity":1,"message":"212","line":79,"column":41,"nodeType":"213","endLine":79,"endColumn":130},{"ruleId":"214","severity":1,"message":"215","line":62,"column":91,"nodeType":"216","endLine":62,"endColumn":118},{"ruleId":"211","severity":1,"message":"212","line":85,"column":68,"nodeType":"213","endLine":85,"endColumn":132},{"ruleId":"211","severity":1,"message":"212","line":86,"column":69,"nodeType":"213","endLine":86,"endColumn":159},{"ruleId":"217","severity":1,"message":"218","line":37,"column":44,"nodeType":"219","messageId":"220","endLine":37,"endColumn":46},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]